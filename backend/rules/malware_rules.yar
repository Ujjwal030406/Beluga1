
private rule SuspiciousStrings {
    meta:
        description = "Detects common suspicious strings and obfuscated variants"
        risk_level = "high"
    strings:
        // Command execution
        $cmd1 = "cmd.exe" nocase wide ascii
        $cmd2 = "powershell" nocase wide ascii
        $cmd3 = "wscript" nocase wide ascii
        $cmd4 = "cscript" nocase wide ascii
        $cmd5 = "mshta" nocase wide ascii
        
        // Registry operations
        $reg1 = "RegCreateKeyEx" nocase wide ascii
        $reg2 = "RegSetValueEx" nocase wide ascii
        $reg3 = "RegDeleteKey" nocase wide ascii
        
        // System operations
        $sys1 = "system(" nocase wide ascii
        $sys2 = "ShellExecute" nocase wide ascii
        $sys3 = "RunDll32" nocase wide ascii
        
        // Encoding/Decoding
        $enc1 = "b64decode" nocase wide ascii
        $enc2 = "base64.b64decode" nocase wide ascii
        $enc3 = "FromBase64String" nocase wide ascii
        
        // Obfuscated commands
        $alt_cmd = { 63 6D 64 } // Hex obfuscation of "cmd"
        $encoded_cmd = "Zm9vIC1mYm0=" // Base64-encoded command
        
        // File operations
        $del1 = "del " nocase wide ascii
        $del2 = "delete" nocase wide ascii
        $del3 = "rmdir" nocase wide ascii
        
        // Process operations
        $proc1 = "CreateProcess" nocase wide ascii
        $proc2 = "ShellExecute" nocase wide ascii
        $proc3 = "WinExec" nocase wide ascii
    condition:
        5 of them
}

private rule PackedExecutable {
    meta:
        description = "Detects packed or obfuscated PE files using entropy analysis"
        risk_level = "high"
    condition:
        for any section in pe.sections: (
            section.entropy > 7.5 and 
            section.virtual_size > 40000 and
            section.virtual_size > 2 * section.raw_data_size
        )
}

private rule SuspiciousImports {
    meta:
        description = "Detects PE files importing dangerous functions"
        risk_level = "high"
    condition:
        (pe.imports("kernel32.dll", "VirtualAlloc") and
        pe.imports("kernel32.dll", "WriteProcessMemory")) or
        (pe.imports("advapi32.dll", "RegSetValueExA") and
        pe.imports("advapi32.dll", "RegCreateKeyExA")) or
        (pe.imports("ws2_32.dll", "connect") and
        pe.imports("ws2_32.dll", "send")) or
        (pe.imports("kernel32.dll", "CreateRemoteThread") and
        pe.imports("kernel32.dll", "VirtualAllocEx")) or
        (pe.imports("user32.dll", "LoadLibraryA") and
        pe.imports("kernel32.dll", "GetProcAddress"))
}

private rule AntiAnalysis {
    meta:
        description = "Detects anti-debugging and anti-VM techniques"
        risk_level = "high"
    strings:
        // Anti-debugging checks
        $debug1 = "IsDebuggerPresent" nocase wide ascii
        $debug2 = "CheckRemoteDebuggerPresent" nocase wide ascii
        $debug3 = "NtQueryInformationProcess" nocase wide ascii
        $debug4 = "GetTickCount" nocase wide ascii
        $debug5 = "QueryPerformanceCounter" nocase wide ascii
        
        // Anti-VM strings
        $vm1 = "VMware" nocase wide ascii
        $vm2 = "VBox" nocase wide ascii
        $vm3 = "QEMU" nocase wide ascii
        
        // Sandbox detection
        $sand1 = "SbieDll.dll" nocase wide ascii
        $sand2 = "DbgHelp" nocase wide ascii
        $sand3 = "api_log" nocase wide ascii
        
        // Debug breaks
        $break1 = { CC } // int 3
        $break2 = { CD 03 } // int 3 alternative
    condition:
        3 of them
}

rule EnhancedMalwareDetection {
    meta:
        description = "Comprehensive malware detection combining multiple indicators"
        author = "Security Team"
        risk_level = "high"
        version = "2.0"
    condition:
        uint16(0) == 0x5A4D and // Is PE file
        filesize > 20KB and filesize < 10MB and // Size constraints
        (
            // Core detection logic
            (SuspiciousStrings and PackedExecutable) or
            (SuspiciousImports and AntiAnalysis) or
            (PackedExecutable and SuspiciousImports) or
            
            // Ransomware specific detection
            (Ransomware_Indicators and SuspiciousNetworkActivity) or
            
            // Advanced threats
            (SuspiciousAPIUsage and SuspiciousMemoryAllocations) or
            
            // Known malware detection
            KnownMalwareIOCs
        ) and
        not WhitelistedSystemFiles
}

private rule Ransomware_Indicators {
    meta:
        description = "Enhanced ransomware behavior detection"
        author = "Security Team"
        risk_level = "critical"
        category = "RANSOMWARE"
    strings:
        // Encryption operations
        $encrypt1 = "CryptoAPI" nocase wide ascii
        $encrypt2 = "CryptEncrypt" nocase wide ascii
        $encrypt3 = "AES_encrypt" nocase wide ascii
        $encrypt4 = "RC4_encrypt" nocase wide ascii
        $encrypt5 = "CryptGenKey" nocase wide ascii
        $encrypt6 = "Rijndael" nocase wide ascii
        
        // Ransom notes
        $note1 = "YOUR FILES HAVE BEEN ENCRYPTED" nocase wide ascii
        $note2 = "BITCOIN" nocase wide ascii
        $note3 = "DECRYPT" nocase wide ascii
        $note4 = "PAYMENT" nocase wide ascii
        $note5 = "RESTORE FILES" nocase wide ascii
        $note6 = "PRIVATE KEY" nocase wide ascii
        
        // File extensions
        $ext1 = ".encrypted" nocase wide ascii
        $ext2 = ".locked" nocase wide ascii
        $ext3 = ".crypted" nocase wide ascii
        $ext4 = ".enc" nocase wide ascii
        
        // System tampering
        $shadow1 = "vssadmin delete shadows" nocase wide ascii
        $shadow2 = "wmic shadowcopy delete" nocase wide ascii
        $shadow3 = "bcdedit /set {default} recoveryenabled No" nocase wide ascii
        $shadow4 = "wbadmin delete catalog" nocase wide ascii
        
        // Process termination
        $kill1 = "taskkill /f /im" nocase wide ascii
        $kill2 = "net stop" nocase wide ascii
    condition:
        (3 of ($encrypt*)) and
        (2 of ($note*)) and
        (
            (1 of ($ext*)) or
            (2 of ($shadow*)) or
            (1 of ($kill*))
        )
}